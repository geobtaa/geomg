<script>
  $(function () {
    if ($('[data-toggle="tooltip"]').length > 0) {
      //$('[data-toggle="tooltip"]').tooltip();
    }
  });

  // Date Range picker
  $('#date-range').on('change', function(event){
    GEOMG.DateRangeSelect();

    if ($('#compare').length > 0) {
      GEOMG.CompareRangeSelect();
    }
  });

  // Compare Range checkbox toggle
  $("input#compare").on('change', function(event){
    GEOMG.DisplayCompareDateRange();
    GEOMG.CompareRangeSelect();
    GEOMG.ToggleCompare();
  });

  // Compare Range picker
  $('#compare-options').on('change', function(event){
    GEOMG.CompareRangeSelect();
  });

  // Bootstrap DateRangePicker
  $('input[name="daterange"]').daterangepicker({
    autoUpdateInput: false,
    locale: { cancelLabel: 'Clear' }
    });

  $('input[name="daterange"]').on('apply.daterangepicker', function(ev, picker) {
      $(this).val(picker.startDate.format('MM/DD/YYYY') + ' - ' + picker.endDate.format('MM/DD/YYYY'));

  });

  $('input[name="daterange"]').on('cancel.daterangepicker', function(ev, picker) {
      $(this).val('');
  });

  $(document).on('ready turbolinks:load', function() {
    GEOMG.DisableIfPersisted();
  });
</script>

<script type="module">
  import {Uppy, Dashboard, XHRUpload} from "https://releases.transloadit.com/uppy/v3.6.1/uppy.min.mjs"

  if (document.getElementsByClassName('uppy-dashboard-container').length > 0) {

    var closest = function(el, fn) {
      return el && (fn(el) ? el : closest(el.parentNode, fn));
    }
    
    var container = document.getElementsByClassName('uppy-dashboard-container')[0];
    var containerForm = closest(container, function(el) { return el.tagName.toLowerCase() == "form" });
    var cachedFileTableEl = containerForm.querySelector("*[data-toggle='cached-files-table']");
    var browseEverythingButton = containerForm.querySelector('*[data-toggle="kithe-browse-everything"]');
    var submitButton = containerForm.querySelector("*[data-toggle='kithe-upload-submit']");

    var uppy = new Uppy()
      .use(Dashboard, {
        inline: true,
        target: '.uppy-dashboard-container'
      })
      .use(XHRUpload, { 
        endpoint: '/direct_upload',
        fieldName: 'file'
      })

    // Turns a number of bytes into human readable eg "12GB"
    // https://stackoverflow.com/a/38897674
    var fileSizeSI = function(size) {
      var e = (Math.log(size) / Math.log(1e3)) | 0;
      return +(size / Math.pow(1e3, e)).toFixed(1) + ' ' + ('kMGTPEZY'[e - 1] || '') + 'B';
    }

    // Returns the <input type="hidden"> representing a direct-uploaded
    // file, to be sent to controller for attachment. Value will be a JSON
    // serialization of the hash describing the uploaded-to-cache file,
    // to be sent to the controller.
    var makeHiddenFieldForCachedFile = function(shrineHash) {
      var hidden = document.createElement("input");
      hidden.setAttribute("type", "hidden");
      hidden.setAttribute("name", "cached_files[]");
      hidden.setAttribute("value", JSON.stringify(shrineHash));

      return hidden;
    }

    // create a DOM element for a table row that will be the list of succesfully
    // direct uploaded files, including hidden inputs to be submitted with form,
    // and a remove button to remove it from list.
    //
    // With just browser API, yeah, it's a bit ugly code.
    var makeCachedFileRow = function(shrineHash) {
      var row = document.createElement("tr");

      var firstCell = row.appendChild(document.createElement("td"));
      firstCell.appendChild(makeHiddenFieldForCachedFile(shrineHash));
      firstCell.appendChild(document.createTextNode(shrineHash.metadata.filename));

      if (shrineHash.metadata.size) {
        var size = fileSizeSI(shrineHash.metadata.size);
      } else {
        var size = "";
      }

      row.appendChild(document.createElement("td")).innerText = size;

      // Storage type control, put in params keyed by file ID
      row.appendChild(document.createElement("td")).innerHTML =
        "<select name='storage_type_for[" + shrineHash.id + "]' class='form-control derivative-storage-type'>" +
          "<option>public</option><option>restricted</option>" +
        "</select>";

      row.appendChild(document.createElement("td")).innerHTML =
        "<button type='button' data-cached-file-remove='true' class='btn btn-link' aria-label='Remove' title='Remove'>" +
          "<i class='fa fa-times-circle' style='font-size: 180%' aria-hidden='true'></i>" +
        "</button>";

      return row;
    }

    // Upload Success
    // When a file is fully direct uploaded by uppy, we remove it from uppy dashboard,
    // and instead list it in our list of files to be attached on form submit.
    uppy.on("upload-success", function(file, response) {
      var shrineHash = response.body;

      // add the file to our list that will be submitted with form
      cachedFileTableEl.appendChild(makeCachedFileRow(shrineHash));

      // And remove from uppy dashboard, we're treating that just as the in-progress
      // list. This means we won't get a `complete` callback though. :(
      uppy.removeFile(file.id);
    });

    // Upload Complete
    uppy.on('complete', (result) => {
      console.log('Upload complete! Weâ€™ve uploaded these files:', result.successful)
    })
  }
</script>
